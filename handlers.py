import asyncio
import aioschedule
import datetime
from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message
from aiogram import F
from aiogram.utils.media_group import MediaGroupBuilder
import pytz

from base import check_sub, add_free_post, check_free, check_and_delete_free, add_post, add_subscribe, \
    check_and_publicate, edit_text_post, edit_media_post, del_subscribe, get_groups, \
    get_chats, get_chat, get_post, add_user, get_region, get_all_id, get_subs, check_truck, get_post_info, check_post
from buttons import regions, actions_with, actions_without, back, create_buttons, oper_accept, \
    order, edit_post, operator, download, added_free_post, i_pay, truck_pay, create_oper_but
from config import OPERATOR, truck
from main import bot, dp
from middlewares.album_middleware import AlbumMiddleware

router = Router()
router.message.middleware(AlbumMiddleware())


class UserInfo(StatesGroup):
    region = State()
    action = State()
    free_post_group = State()
    post_group = State()
    wait_verify = State()
    get_link = State()
    FIO = State()
    photo = State()


class Operator(StatesGroup):
    verify = State()
    menu = State()
    set_sub = State()
    rem_sub = State()
    text_message = State()
    achive_message = State()
    truck = State()


class Post(StatesGroup):
    achive = State()
    check_achive = State()
    text = State()
    username = State()
    select = State()
    view = State()
    edit_text = State()
    edit_media = State()


class verification(StatesGroup):
    no_sub = State()
    get_info = State()
    get_username = State()


class Order(StatesGroup):
    accept = State()


@router.message(Command('start'))
async def get_start(message: Message, state: FSMContext):
    if message.from_user.id == OPERATOR:
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –û–ø–µ—Ä–∞—Ç–æ—Ä:', reply_markup=operator.as_markup())
        await state.set_state(Operator.menu)
    else:
        if await get_region(message.from_user.id):
            await state.update_data(region=await get_region(message.from_user.id),
                                    groups=await get_groups(await get_region(message.from_user.id)))
            await bot.send_photo(chat_id=message.from_user.id,
                                 photo='AgACAgIAAxkBAAIIqGXPLaRmFaXMIvChCbgbmO0BhSUiAAL60zEbkkh4SmBWQa'
                                       '-zsWZqAQADAgADeQADNAQ',
                                 caption='<b>üî• –°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ê–ö–¶–ò–Ø!</b>\n\n'
                                         '–°–∫–∞—á–∏–≤–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OURS, –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ä–∞–∑–º–µ—â–∞–π —Å–≤–æ–∏ —É—Å–ª—É–≥–∏'
                                         '–∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é, '
                                         '–∏ –¥–∞–ª—å—à–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã <b>–≤–æ –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º '
                                         '–≥—Ä—É–ø–ø–∞—Ö</b> '
                                         '–ø–æ —Ç–≤–æ–µ–º—É —à—Ç–∞—Ç—É <b>3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <b>—Å–æ —Å–∫–∏–¥–∫–æ–π 70%</b>, '
                                         '–∫–∞–∫ –∏—Ç–æ–≥ $63 –∑–∞ '
                                         '–ú–ï–°–Ø–¶.\n\n'
                                         'ü§´ –î–∞-–¥–∞, –æ–¥–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –≤–æ –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞—Ö!',
                                 reply_markup=download.as_markup(), parse_mode='HTML')
            await bot.send_message(chat_id=message.from_user.id,
                                   text='–ï—Å–ª–∏ —É —Ç–µ–±—è –ê–Ω–¥—Ä–æ–∏–¥ ü§ñ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å '
                                        '–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Zelle –ë–ï–ó —Å–∫–∏–¥–∫–∏ 70%, —Ç–æ —Å–≤—è–∂–∏—Å—å —Å '
                                        '–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–Ω–∏–∑—É.\n\n'
                                        '–≠—Ç–∏ —Ä–µ–±—è—Ç–∞ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ üßë‚ÄçüöÄ',
                                   reply_markup=actions_with if await check_sub(
                                       message.from_user.username) else actions_without)
            await bot.send_message(chat_id=message.from_user.id, text='–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É '
                                                                      '–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∞–≤–¥–∞ 1 —Ä–∞–∑ –∑–∞ 24 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –≤ '
                                                                      '–æ–¥–Ω–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–µ üôÇ\n\n'
                                                                      '‚û°Ô∏è –ö—Å—Ç–∞—Ç–∏ –≤ <a href = "https://oursusa.com/?utm_campaign=bot_ads&utm_medium=social&utm_source=ads_bot_services">OURS</a> –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
                                   reply_markup=added_free_post.as_markup(), parse_mode='HTML',
                                   disable_web_page_preview=True)

        else:
            await message.bot.send_photo(chat_id=message.from_user.id,
                                         photo='AgACAgIAAxkBAAIIbGXPGjDgHSi71VsCPQWtIrTSwC53AAKg0zEbkkh4St6NB5Z5xIPFAQADAgADeQADNAQ',
                                         caption='–ü—Ä–∏–≤–µ—Ç üëã\n'
                                                 '–†–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ OURS.\n'
                                                 '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —à—Ç–∞—Ç, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø—ã!\n\n'
                                                 '–õ–∏–±–æ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –ø–æ –≤—Å–µ–º—É –°–®–ê üôå',
                                         reply_markup=regions.as_markup())
            await state.set_state(UserInfo.region)


@router.callback_query(Operator.menu)
async def work_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'set_sub':
        await call.bot.send_message(chat_id=call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:')
        await state.set_state(Operator.set_sub)
    elif call.data == 'rem_sub':
        await call.bot.send_message(chat_id=call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:')
        await state.set_state(Operator.rem_sub)
    elif call.data == 'message_for':
        await call.bot.send_message(chat_id=call.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await state.set_state(Operator.text_message)
    elif call.data == 'ok_verify':
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await add_subscribe([data['user_ver'], data["name"]])
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞.\n'
                                                                   '<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É '
                                                                   '—Ä–µ–∫–ª–∞–º–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫',
                                    parse_mode='HTML')
    elif call.data == 'no_verify':
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
    elif 'ok_pay' in str(call.data):
        chat = call.data.split('_')[2]
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.send_message(chat_id=call.from_user.id, text='–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–∫–æ–≤—ã–π –±–∏–∑–Ω–µ—Å?',
                                    reply_markup=truck_pay.as_markup())
        await state.update_data(user=chat, name=data['name'], message=call.message.message_id)
        await state.set_state(Operator.truck)

    elif 'no_pay' in call.data:
        chat = call.data.split('_')[2]
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=chat, text='–£–ø—Å, –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à—É Premium '
                                                       '–ø–æ–¥–ø–∏—Å–∫—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                    reply_markup=i_pay.as_markup())
        await state.set_state(Operator.menu)


@router.callback_query(Operator.truck)
async def oprator_call(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'ok_truck':
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        await state.update_data(truck='yes')
        data = await state.get_data()
        await add_subscribe([data['user'], data["name"], data['truck']])
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        try:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=data['message'])
        except:
            pass
        await call.bot.send_message(chat_id=data['user'], text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ü•≥\n\n')
        await call.bot.send_message(chat_id=data['user'], text='<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É —Ä–µ–∫–ª–∞–º–Ω–æ–º—É '
                                                               '–æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫', parse_mode='HTML',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.set_state(Operator.menu)
    elif call.data == 'no_truck':
        await state.update_data(truck='no')
        data = await state.get_data()
        await add_subscribe([data['user'], data["name"], data['truck']])
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user'], text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ü•≥\n\n')
        await call.bot.send_message(chat_id=data['user'], text='<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É —Ä–µ–∫–ª–∞–º–Ω–æ–º—É '
                                                               '–æ–±—ä–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫', parse_mode='HTML',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.set_state(Operator.menu)


@router.callback_query(Operator.text_message, Operator.achive_message, Operator.menu)
async def oprator_call(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'ok_verify':
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await add_subscribe([data['user_ver'], data["name"]])
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞.\n'
                                                                   '<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É —Ä–µ–∫–ª–∞–º–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫',
                                    parse_mode='HTML')
        await state.set_state(Operator.menu)
    elif call.data == 'no_verify':
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.set_state(Operator.menu)
    elif 'ok_pay' in str(call.data):
        chat = call.data.split('_')[2]
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.send_message(chat_id=call.from_user.id, text='–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–∫–æ–≤—ã–π –±–∏–∑–Ω–µ—Å?',
                                    reply_markup=truck_pay.as_markup())
        await state.update_data(user=chat, name=data['name'])
        await state.set_state(Operator.truck)
    elif 'no_pay' in str(call.data):
        chat = call.data.split('_')[2]
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=chat, text='–£–ø—Å, –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à—É Premium '
                                                       '–ø–æ–¥–ø–∏—Å–∫—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                    reply_markup=i_pay.as_markup())
        await state.set_state(Operator.menu)


@router.message(Operator.text_message)
async def operator_text(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.html_text)
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è:')
    await state.set_state(Operator.achive_message)


@router.message(Operator.achive_message)
async def operator_achive(message: types.Message, state: FSMContext, album: list = None):
    await state.update_data(photo_message=[], video_message=[])
    data = await state.get_data()
    if album:
        if len(album) > 5:
            await message.answer('–ù–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª—å—à–µ 5 –≤–ª–æ–∂–µ–Ω–∏–π\n'
                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            for i in album:
                if 'Video' in str(i):
                    pre = str(i).split('Video')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['video_message'].append(pre)
                elif 'photo=[PhotoSize(' in str(i):
                    pre = str(i).split('photo=[PhotoSize(')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['photo_message'].append(pre)
            else:
                data = await state.get_data()
                await send_messages(data)
                await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=operator.as_markup())
                await state.set_state(Operator.menu)
    else:
        if message.photo:
            data['photo_message'].append(message.photo[-1].file_id)
        elif message.video:
            data['video_message'].append(message.video.file_id)
        data = await state.get_data()
        await send_messages(data)
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=operator.as_markup())
        await state.set_state(Operator.menu)


@router.message(Operator.set_sub)
async def new_sub(message: types.Message, state: FSMContext):
    answer = message.text
    data = ['-', answer]
    await add_subscribe(data)
    await message.answer('–ü–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤–∞–º–∏ username –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.', reply_markup=operator.as_markup())
    await state.set_state(Operator.menu)


@router.message(Operator.rem_sub)
async def del_sub(message: types.Message, state: FSMContext):
    answer = message.text
    await del_subscribe(answer)
    await message.answer('–ü–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤–∞–º–∏ username –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.', reply_markup=operator.as_markup())
    await state.set_state(Operator.menu)


@router.callback_query(UserInfo.region)
async def work_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data in ['–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', '–§–ª–æ—Ä–∏–¥–∞', '–ù—å—é-–ô–æ—Ä–∫', '–ò–ª–ª–∏–Ω–æ–π—Å', '–ù—å—é-–î–∂–µ—Ä—Å–∏']:
        await add_user([call.from_user.id, call.from_user.username, 'no', call.data, '-', '-'])
        await state.set_state(None)
        groups = await get_groups(str(call.data))
        stroke = ''
        i = 1
        for reg in groups:
            stroke += f'<b>{i}.{reg}</b>\n\n'
            i += 1
        else:
            stroke += f'<b>{i}.–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–∏ –≤ –°–®–ê üöõ*</b>\n\n' \
                      '*—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–∞–∫–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞'
        await state.update_data(region=call.data, groups=groups)
        await call.bot.send_message(chat_id=call.from_user.id,
                                    text=f'–°–ø–∞—Å–∏–±–æ, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ–±—è '
                                         f'üëá\n\n'
                                         f'{stroke}', parse_mode='HTML', reply_markup=actions_with if await check_sub(
                call.from_user.username) else actions_without)
        await asyncio.sleep(1)
        await call.bot.send_photo(chat_id=call.from_user.id,
                                  photo='AgACAgIAAxkBAAIIqGXPLaRmFaXMIvChCbgbmO0BhSUiAAL60zEbkkh4SmBWQa'
                                        '-zsWZqAQADAgADeQADNAQ',
                                  caption='<b>üî• –°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ê–ö–¶–ò–Ø!</b>\n\n'
                                          '–°–∫–∞—á–∏–≤–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OURS, –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ä–∞–∑–º–µ—â–∞–π —Å–≤–æ–∏ —É—Å–ª—É–≥–∏'
                                          '–∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é, '
                                          '–∏ –¥–∞–ª—å—à–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã <b>–≤–æ –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º '
                                          '–≥—Ä—É–ø–ø–∞—Ö</b> '
                                          '–ø–æ —Ç–≤–æ–µ–º—É —à—Ç–∞—Ç—É <b>3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <b>—Å–æ —Å–∫–∏–¥–∫–æ–π 70%</b>, '
                                          '–∫–∞–∫ –∏—Ç–æ–≥ $63 –∑–∞ '
                                          '–ú–ï–°–Ø–¶.\n\n'
                                          'ü§´ –î–∞-–¥–∞, –æ–¥–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –≤–æ –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–∞—Ö!',
                                  reply_markup=download.as_markup(), parse_mode='HTML')
        await call.bot.send_message(chat_id=call.from_user.id, text='–ï—Å–ª–∏ —É —Ç–µ–±—è –ê–Ω–¥—Ä–æ–∏–¥ ü§ñ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å '
                                                                    '–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Zelle –ë–ï–ó —Å–∫–∏–¥–∫–∏ 70%, —Ç–æ —Å–≤—è–∂–∏—Å—å —Å '
                                                                    '–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–Ω–∏–∑—É.\n\n'
                                                                    '–≠—Ç–∏ —Ä–µ–±—è—Ç–∞ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ üßë‚ÄçüöÄ',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await call.bot.send_message(chat_id=call.from_user.id, text='–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, '
                                                                    '–ø—Ä–∞–≤–¥–∞ 1 —Ä–∞–∑ –∑–∞ 24 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π '
                                                                    '—Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–µ üôÇ',
                                    reply_markup=added_free_post.as_markup())


@router.callback_query(StateFilter(None))
@router.callback_query(StateFilter(Operator.menu))
@router.callback_query(StateFilter(verification.no_sub))
async def work_callback(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'download':
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id + 1)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id + 2)
        await bot.send_message(chat_id=call.from_user.id,
                               text='<b>–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n\n<a '
                                    'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                    '=ads_bot"><b>üëâOURSUSA.COM</b></a>\n<a '
                                    'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                    '=ads_bot"><b>üëâOURSUSA.COM</b></a>\n<a '
                                    'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                    '=ads_bot"><b>üëâOURSUSA.COM</b></a>', parse_mode='HTML',
                               disable_web_page_preview=True)
        await asyncio.sleep(2)
        await bot.send_message(chat_id=call.from_user.id,
                               text='–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´<b>–Ø –û–ü–õ–ê–¢–ò–õ</b>¬ª, –µ—Å–ª–∏ —Ç—ã –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É Premium.',
                               reply_markup=i_pay.as_markup(), parse_mode='HTML')
        await bot.send_video(chat_id=call.from_user.id,
                             video='BAACAgIAAxkBAAILnmXRA2pYGHsSmgWr1lao5LmSRY-QAAK5RAACZKCJSjGvIDSX9DcwNAQ',
                             caption='–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ '
                                     '40 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –≤—ã—Ç–∞—â–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –∏–∑ OURS',
                             reply_markup=actions_with if await check_sub(
                                 call.from_user.username) else actions_without)
    elif call.data == 'i_pay':
        await call.answer()
        try:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id + 1)
        except:
            pass
        await call.bot.send_photo(chat_id=call.from_user.id,
                                  photo='AgACAgIAAxkBAAIR6GXXX4M4pIcmONBz2WMH-232yGIKAAKd1jEbNt-5SgyMiakYnn8uAQADAgADeQADNAQ',
                                  caption='–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —É–∫–∞–∑–∞–ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ OURS')
        await state.set_state(UserInfo.FIO)
    elif call.data == 'free_post':
        await call.answer()
        data = await state.get_data()
        access = await check_free((str(call.from_user.id),))
        if access is False:
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
                                   reply_markup=await create_buttons(data["groups"]))
            await state.update_data(type='free')
            await state.set_state(UserInfo.free_post_group)
        else:
            await bot.send_message(chat_id=call.from_user.id, text=f'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç '
                                                                   f'–∑–∞ 24 —á–∞—Å–∞.\n\n '
                                                                   f'–°–ª–µ–¥—É—é—â–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {access}\n\n'
                                                                   f'ü´∂ –õ–∏–±–æ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç, —á—Ç–æ–±—ã '
                                                                   f'—Ä–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ!',
                                   reply_markup=actions_with if await check_sub(
                                       call.from_user.username) else actions_without)
    elif '@' in call.data:
        await state.update_data(link=call.data)
        await state.update_data(photo=[], video=[])
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text='<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É —Ä–µ–∫–ª–∞–º–Ω–æ–º—É '
                                                               '–æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫', parse_mode='HTML',
                               reply_markup=back.as_markup())
        await state.set_state(Post.achive)
    elif call.data == 'ok_verify':
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await add_subscribe([data['user_ver'], data["name"]])
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞.\n'
                                                                   '<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É '
                                                                   '—Ä–µ–∫–ª–∞–º–Ω–æ–º—É –æ–±—ä–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫',
                                    parse_mode='HTML')
    elif call.data == 'no_verify':
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=data['user_ver'], text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
    elif 'ok_pay' in str(call.data):
        chat = call.data.split('_')[2]
        await call.answer('–û–¥–æ–±—Ä–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.send_message(chat_id=call.from_user.id, text='–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–∫–æ–≤—ã–π –±–∏–∑–Ω–µ—Å?',
                                    reply_markup=truck_pay.as_markup())
        await state.update_data(user=chat, name=data['name'])
        await state.set_state(Operator.truck)
    elif call.data == 'no_pay':
        chat = call.data.split('_')[2]
        await call.answer('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
        state_with: FSMContext = FSMContext(
            storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            key=new_user_storage_key)
        data = await state_with.get_data()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=chat, text='–£–ø—Å, –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à—É Premium '
                                                       '–ø–æ–¥–ø–∏—Å–∫—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                    reply_markup=i_pay.as_markup())
    await call.answer()
    if call.data == 'go_verify':
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=call.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π '
                                                                    '–∫–æ–º–ø–∞–Ω–∏–∏:', reply_markup=back.as_markup())
        await state.set_state(verification.get_info)
    elif call.data == "order":
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text='–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                               reply_markup=order.as_markup())
        await state.set_state(Order.accept)
    elif call.data == "go_back":
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=call.from_user.id,
                                    text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {await get_region(call.from_user.id)}',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.clear()


@router.callback_query(Post.select)
async def pay_post(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'go_back':
        # data = await state.get_data()
        await call.answer()
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await state.clear()


@router.callback_query(Post.view)
async def pay_post(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'edit_text':
        await call.answer()
        await call.bot.send_message(chat_id=call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:',
                                    reply_markup=back.as_markup())
        await state.set_state(Post.edit_text)
    elif call.data == 'edit_media':
        await call.answer()
        await call.bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:',
                                    reply_markup=back.as_markup())
        await state.set_state(Post.edit_media)
    elif call.data == 'back':
        await call.answer()
        message = call.message.message_id
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=message)
        await state.clear()


@router.callback_query(Post.edit_media)
@router.callback_query(Post.edit_text)
async def pay_post(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'go_back':
        await call.answer()
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await state.set_state(Post.view)


@router.message(UserInfo.FIO)
async def edit_text(message: types.Message, state: FSMContext):
    await state.update_data(text_check=message.text)
    new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
    state_with: FSMContext = FSMContext(
        storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
        key=new_user_storage_key)
    await state_with.update_data(user=message.from_user.id, name=message.from_user.username)
    data = await state.get_data()
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n'
                         '‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 5 –º–∏–Ω—É—Ç')
    await bot.send_message(chat_id=OPERATOR, text=f'–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã:\n\n'
                                                  f'–§–ò–û: {data["text_check"]}\n'
                                                  f'Username: {message.from_user.username}',
                           reply_markup=await create_oper_but(message.from_user.id))
    await state.set_state(None)


@router.message(Post.edit_text)
async def edit_text(message: types.Message, state: FSMContext):
    answer = message.html_text
    data = await state.get_data()
    if len(answer) <= 400:
        await edit_text_post((answer, message.from_user.username, data['edit_text']))
        await preview([message.from_user.username, await get_region(message.from_user.id), message.from_user.id])
        await bot.send_message(chat_id=message.from_user.id, text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞!\n',
                               reply_markup=actions_with if await check_sub(
                                   message.from_user.username) else actions_without)
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–µ –±–æ–ª–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤.')


@router.message(Post.edit_media)
async def achive_post(message: types.Message, state: FSMContext, album: list = None):
    await state.update_data(photo=[], video=[])
    data = await state.get_data()
    if album:
        if len(album) > 5:
            await message.answer('–ù–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª—å—à–µ 5 –≤–ª–æ–∂–µ–Ω–∏–π\n'
                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            for i in album:
                if 'Video' in str(i):
                    pre = str(i).split('Video')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['video'].append(pre)
                elif 'photo=[PhotoSize(' in str(i):
                    pre = str(i).split('photo=[PhotoSize(')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['photo'].append(pre)
            else:
                await edit_media_post(
                    (str(data['photo']), str(data['video']), message.from_user.username, data['edit_text']))
                await get_post(message.from_user.username)
                await preview(
                    [message.from_user.username, await get_region(message.from_user.id), message.from_user.id])
                await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞',
                                     reply_markup=actions_with if await check_sub(
                                         message.from_user.username) else actions_without)
                await state.clear()
    else:
        if message.photo:
            data['photo'].append(message.photo[-1].file_id)
        elif message.video:
            data['video'].append(message.video.file_id)
        await edit_media_post((str(data['photo']), str(data['video']), message.from_user.username, data['edit_text']))
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞')
        await state.clear()


@router.callback_query(Order.accept)
async def pay_post(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'ok_order':
        await call.bot.send_message(chat_id=call.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π '
                                                                    '–∫–æ–º–ø–∞–Ω–∏–∏:', reply_markup=back.as_markup())
        await state.set_state(verification.get_info)


@router.message(verification.get_info)
async def verifi(message: types.Message, state: FSMContext):
    if message.from_user.username is not None:
        await state.update_data(ver_user=message.from_user.username)
        if message.photo:
            await state.update_data(ver_photo=message.photo[-1].file_id)
            data = await state.get_data()
            await bot.send_photo(chat_id=OPERATOR, photo=data['ver_photo'],
                                 caption=f'–ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç @{data["ver_user"]}',
                                 reply_markup=oper_accept.as_markup())
        else:
            await state.update_data(ver_text=message.text)
            data = await state.get_data()
            new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
            state_with: FSMContext = FSMContext(
                storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
                key=new_user_storage_key)
            await state_with.update_data(user_ver=message.from_user.id, name=data["ver_user"])
            await state_with.set_state(Operator.verify)
            await bot.send_message(chat_id=OPERATOR, text=f'–ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç @{data["ver_user"]}\n\n'
                                                          f'{data["ver_text"]}', reply_markup=oper_accept.as_markup())
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ.')
        await state.set_state(UserInfo.wait_verify)
    else:
        if message.photo:
            await state.update_data(ver_photo=message.photo[-1].file_id)
        else:
            await state.update_data(ver_text=message.text)
        await message.answer('–£ –≤–∞—Å —Å–∫—Ä—ã—Ç username!\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:')
        await state.set_state(verification.get_username)


@router.message(verification.get_username)
async def ver_username(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(ver_user=answer)
    data = await state.get_data()
    new_user_storage_key = StorageKey(bot_id=bot.id, chat_id=OPERATOR, user_id=OPERATOR)
    state_with: FSMContext = FSMContext(
        storage=dp.storage,  # dp - —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
        key=new_user_storage_key)
    await state_with.update_data(user_ver=message.from_user.id, name={data["ver_user"]})
    await bot.send_message(chat_id=OPERATOR, text=f'–ó–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç @{data["ver_user"]}\n\n'
                                                  f'{data["ver_text"]}', reply_markup=oper_accept.as_markup())
    await state_with.set_state(Operator.verify)
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ.')
    await state.set_state(UserInfo.wait_verify)


@router.callback_query(UserInfo.post_group)
async def pay_post(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'go_back':
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=call.from_user.id,
                                    text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {await get_region(call.from_user.id)}',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.clear()


@router.callback_query(Post.achive)
async def back_achive(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'go_back':
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=call.from_user.id,
                                    text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {await get_region(call.from_user.id)}',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.clear()


@router.callback_query(UserInfo.free_post_group)
async def free_post(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == 'go_back':
        await call.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await call.bot.send_message(chat_id=call.from_user.id,
                                    text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {await get_region(call.from_user.id)}',
                                    reply_markup=actions_with if await check_sub(
                                        call.from_user.username) else actions_without)
        await state.clear()
    elif '@' in call.data:
        await state.update_data(photo=[], video=[], link=call.data)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text='<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É —Ä–µ–∫–ª–∞–º–Ω–æ–º—É '
                                                               '–æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫', parse_mode='HTML',
                               reply_markup=back.as_markup())
        await state.set_state(Post.achive)


@router.message(F.video)
@router.message(F.photo)
@router.message(Post.achive, UserInfo.wait_verify)
async def achive_post(message: types.Message, state: FSMContext, album: list = None):
    await state.update_data(photo=[], video=[])
    data = await state.get_data()
    try:
        typ = data['type']
    except KeyError:
        await state.update_data(type='pay')
        data = await state.get_data()
    if album:
        if len(album) > 5:
            await message.answer('–ù–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª—å—à–µ 5 –≤–ª–æ–∂–µ–Ω–∏–π\n'
                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            for i in album:
                if 'Video' in str(i):
                    pre = str(i).split('Video')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['video'].append(pre)
                elif 'photo=[PhotoSize(' in str(i):
                    pre = str(i).split('photo=[PhotoSize(')[1]
                    pre = pre.split('file_unique_id')[0]
                    pre = pre.replace('(', '').replace('file_id=', '').replace(',', '')
                    pre = pre[1:len(pre) - 2]
                    data['photo'].append(pre)
            else:
                await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - len(album))
                await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
                await state.set_state(Post.text)
    else:
        if message.photo:
            data['photo'].append(message.photo[-1].file_id)
        elif message.video:
            data['video'].append(message.video.file_id)
        await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')
        await state.set_state(Post.text)


@router.message(Post.text)
async def text_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answer = message.html_text
    await state.update_data(text=answer)
    name = message.from_user.username
    try:
        typ = data['type']
    except KeyError:
        await state.update_data(type='pay')
        data = await state.get_data()
    if name is None:
        await message.answer('–£ –≤–∞—Å —Å–∫—Ä—ã—Ç username!\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:')
        await state.set_state(Post.username)
    else:
        await state.update_data(username=name)
        if data['type'] == 'free':
            if len(answer) <= 400:
                data = await state.get_data()
                lst = [message.from_user.id, data['username'], data['link']]
                await add_free_post(lst)
                await publ_free_post(data)
                await message.answer('‚úÖ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!',
                                     reply_markup=actions_with if await check_sub(
                                         message.from_user.username) else actions_without)
                await state.clear()
            else:
                await message.answer('–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            data = await state.get_data()
            lst = [data['username'], await get_region(message.from_user.id), data['text'], str(data['photo']),
                   str(data['video'])]
            if await add_post(lst):
                if len(answer) <= 400:
                    await preview(
                        [message.from_user.username, await get_region(message.from_user.id), message.from_user.id])
                    await message.answer(
                        '‚úÖ <b>–†–ï–ö–õ–ê–ú–ê –ó–ê–ü–£–©–ï–ù–ê!</b>\n\n'
                        '–°–ö–û–†–û –û–ù–ê –ü–û–Ø–í–ò–¢–°–Ø –í–û –í–°–ï–• –¢–ï–õ–ï–ì–†–ê–ú –ì–†–£–ü–ü–ê–•.', parse_mode='HTML',
                        reply_markup=actions_with if await check_post(
                            message.from_user.username) else actions_without)
                    await state.clear()
                else:
                    await message.answer('–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤')
            else:
                await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Post.username)
async def name_post(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    await state.update_data(username=answer)
    if data['type'] == 'free':
        lst = [message.from_user.id, data['username'], data['link']]
        if len(data['text']) <= 400:
            await add_free_post(lst)
            await publ_free_post(data)
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
            await message.answer('‚úÖ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!',
                                 reply_markup=actions_with if await check_sub(
                                     message.from_user.username) else actions_without)
            await state.clear()
        else:
            await message.answer('–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤\n'
                                 '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞')
            await state.set_state(Post.text)
    else:
        data = await state.get_data()
        lst = [data['username'], data['region'], data['text'], data['photo'], data['video']]
        if len(data['text']) <= 400:
            await add_post(lst)
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
            await preview([message.from_user.username, await get_region(message.from_user.id), message.from_user.id])
            await message.answer('‚úÖ <b>–†–ï–ö–õ–ê–ú–ê –ó–ê–ü–£–©–ï–ù–ê!</b>\n\n'
                                 '–°–ö–û–†–û –û–ù–ê –ü–û–Ø–í–ò–¢–°–Ø –í–û –í–°–ï–• –¢–ï–õ–ï–ì–†–ê–ú –ì–†–£–ü–ü–ê–•.', parse_mode='HTML',
                                 reply_markup=actions_with if await check_post(
                                     message.from_user.username) else actions_without)
            await state.clear()
        else:
            await message.answer('–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤\n'
                                 '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞')
            await state.set_state(Post.text)


@router.message()
async def operatr(message: types.Message, state: FSMContext):
    if message.text == 'üë©‚ÄçüöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await bot.send_message(chat_id=message.from_user.id,
                               text='üßë‚ÄçüöÄ –ú–∞–∫—Å –∏–∑ OURS –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n'
                                    'https://t.me/ours_ads')
    elif message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ':
        await state.update_data(groups=await get_groups(await get_region(message.from_user.id)))
        data = await state.get_data()
        access = await check_free((str(message.from_user.id),))
        if access is False:
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
            await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
                                   reply_markup=await create_buttons(data["groups"]))
            await state.update_data(type='free')
            await state.set_state(UserInfo.free_post_group)
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –∑–∞ 24 —á–∞—Å–∞.\n\n'
                                        f'–°–ª–µ–¥—É—é—â–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {access}\n\n'
                                        f'ü´∂ –õ–∏–±–æ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç, —á—Ç–æ–±—ã —Ä–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ!',
                                   reply_markup=actions_with if await check_sub(
                                       message.from_user.username) else actions_without)
            await state.clear()
    elif message.text == 'üî• –ü–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞':
        if await check_sub(message.from_user.username):
            await state.update_data(photo=[], video=[], type='pay')
            await bot.send_message(chat_id=message.from_user.id, text='<b>–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:</b>\n\n'
                                                                      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–º—É '
                                                                      '—Ä–µ–∫–ª–∞–º–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é - –¥–æ 5 —à—Ç—É–∫',
                                   parse_mode='HTML',
                                   reply_markup=back.as_markup())
            await state.set_state(Post.achive)
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text='<b>–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n\n<a '
                                        'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                        '=ads_bot"><b>üëâOURSUSA.COM</b></a>\n<a '
                                        'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                        '=ads_bot"><b>üëâOURSUSA.COM</b></a>\n<a '
                                        'href="https://OURSUSA.COM?utm_campaign=bot_ads&utm_medium=social&utm_source'
                                        '=ads_bot"><b>üëâOURSUSA.COM</b></a>', parse_mode='HTML',
                                   disable_web_page_preview=True)
            await asyncio.sleep(2)
            await bot.send_message(chat_id=message.from_user.id,
                                   text='–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´<b>–Ø –û–ü–õ–ê–¢–ò–õ</b>¬ª, –µ—Å–ª–∏ —Ç—ã –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É Premium.',
                                   reply_markup=i_pay.as_markup(), parse_mode='HTML')
            await bot.send_video(chat_id=message.from_user.id,
                                 video='BAACAgIAAxkBAAILnmXRA2pYGHsSmgWr1lao5LmSRY-QAAK5RAACZKCJSjGvIDSX9DcwNAQ',
                                 caption='–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ '
                                         '40 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –≤—ã—Ç–∞—â–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –∏–∑ OURS')
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞':
        try:
            post = await get_post(message.from_user.username)
            await state.update_data(edit_text=post['text'], edit_photo=post["photo"], edit_video=post['video'])
            await view_post(post, message.from_user.id)
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
            await state.set_state(Post.view)
        except KeyError:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤')


async def publ_free_post(data):
    media_group = MediaGroupBuilder(caption=f"{data['text']}\n")
    for photo in data['photo']:
        media_group.add(type='photo', media=photo)
    else:
        for video in data['video']:
            media_group.add(type='video', media=video)
        else:
            await bot.send_media_group(chat_id=await get_chat(data['link']), media=media_group.build())


async def preview(info):
    data = await get_post_info([info[0], info[1]])
    media_group = MediaGroupBuilder(caption=f"{data['text']}")
    if data['photo'] != "[]":
        photos = data['photo'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            photos = photos.split(', ')
            for photo in photos:
                media_group.add(type='photo', media=photo)
        except:
            media_group.add(type='photo', media=photos)
    elif data['video'] != "[]":
        videos = data['video'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            videos = videos.split(', ')
            for video in videos:
                media_group.add(type='video', media=video)
        except:
            media_group.add(type='video', media=videos)
    await bot.send_media_group(chat_id=info[2], media=media_group.build())


async def view_post(data, user):
    media_group = MediaGroupBuilder(caption=f"{data['text']}")
    if data['photo'] != "[]":
        photos = data['photo'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            photos = photos.split(', ')
            for photo in photos:
                media_group.add(type='photo', media=photo)
        except:
            media_group.add(type='photo', media=photos)
    elif data['video'] != "[]":
        videos = data['video'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            videos = videos.split(', ')
            for video in videos:
                media_group.add(type='video', media=video)
        except:
            media_group.add(type='video', media=videos)
    await bot.send_media_group(chat_id=user, media=media_group.build())
    await bot.send_message(chat_id=user, text=f'–í–∞—à –ø–æ—Å—Ç –≤—ã—à–µ, –∂–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                           reply_markup=edit_post.as_markup())


async def send_messages(data):
    media_group = MediaGroupBuilder(caption=f"{data['message_text']}\n")
    if str(data['photo_message']) != "[]":
        photos = str(data['photo_message']).replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            photos = photos.split(', ')
            for photo in photos:
                media_group.add(type='photo', media=photo)
        except:
            media_group.add(type='photo', media=photos)
    elif str(data['video_message']) != "[]":
        videos = str(data['video_message']).replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            videos = videos.split(', ')
            for video in videos:
                media_group.add(type='video', media=video)
        except:
            media_group.add(type='video', media=videos)
    chats = await get_all_id()
    for chat in chats:
        if int(chat) != OPERATOR:
            try:
                await bot.send_media_group(chat_id=chat, media=media_group.build())
            except:
                pass


async def publ_pay(data):
    media_group = MediaGroupBuilder(caption=f"{data['text']}\n")
    if data['photo'] != "[]":
        photos = data['photo'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            photos = photos.split(', ')
            for photo in photos:
                media_group.add(type='photo', media=photo)
        except:
            media_group.add(type='photo', media=photos)
    elif data['video'] != "[]":
        videos = data['video'].replace('"', '').replace("'", '').replace('[', '').replace(']', '')
        try:
            videos = videos.split(', ')
            for video in videos:
                media_group.add(type='video', media=video)
        except:
            media_group.add(type='video', media=videos)
    region = data['region']
    chats = await get_chats(region)
    if await check_truck(data['username']) == 'yes':
        chats.append((truck,))
    for chat in chats:
        await bot.send_media_group(chat_id=chat[0], media=media_group.build())


async def check_subscribes():
    now = datetime.datetime.now()
    now = now.strftime('%d.%m.%y')
    info = await get_subs(now)
    if info:
        for row in info:
            await bot.send_message(chat_id=OPERATOR, text=f'–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{row[0]}')


async def check_time_pay():
    NY = datetime.datetime.now(tz=pytz.timezone('America/New_York'))
    LA = datetime.datetime.now(tz=pytz.timezone('America/Los_Angeles'))
    LA = LA.strftime('%H:%M')
    NY = NY.strftime('%H:%M')
    await check_and_publicate(LA, '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è')
    await check_and_publicate(NY, '–§–ª–æ—Ä–∏–¥–∞')
    await check_and_publicate(NY, '–ù—å—é-–ô–æ—Ä–∫')
    await check_and_publicate(NY, '–ò–ª–ª–∏–Ω–æ–π—Å')
    await check_and_publicate(NY, '–ù—å—é-–î–∂–µ—Ä—Å–∏')


async def check_time_free():
    now = datetime.datetime.now()
    now = now.strftime('%d/%m/%y %H:%M')
    await check_and_delete_free(now)


async def scheduler():
    aioschedule.every().day.at('19:35').do(check_subscribes)
    aioschedule.every().minute.do(check_time_pay)
    aioschedule.every().minute.do(check_time_free)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
